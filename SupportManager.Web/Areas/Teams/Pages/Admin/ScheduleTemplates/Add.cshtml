@page
@using SupportManager.Web.Infrastructure
@model SupportManager.Web.Areas.Teams.Pages.Admin.ScheduleTemplates.AddModel
@{
    ViewBag.Title = "Add Schedule Template";
}

<h2>Add Schedule Template</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Metadata</h4>
        <hr/>
        @Html.HiddenFor(m => m.Data.TeamId)
        @Html.FormBlock(m => m.Data.Name)
        @Html.FormBlock(m => m.Data.StartDay)

        <h4>Schedule</h4>
        <hr />
        <div class="form-group">
            <table>
                <thead>
                <tr>
                    <th>@Html.DisplayLabel(m => m.Data.Entries[0].DayOfWeek).NoTag()</th>
                    <th>@Html.DisplayLabel(m => m.Data.Entries[0].Time).NoTag()</th>
                    <th>@Html.DisplayLabel(m => m.Data.Entries[0].UserSlot)</th>
                    <th></th>
                </tr>
                </thead>
                <tbody id="entries"></tbody>
            </table>
        </div>

        <div class="form-group">
            <button type="button" class="btn btn-success entry-add">Add entry</button>
        </div>

        <hr />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<table id="entry-template" style="display: none;">
    <tbody>
    <tr class="entry">
        <td class="form-group">
            @Html.Input(m => m.Data.Entries[0].DayOfWeek).Modify(tag => (tag as SelectTag)?.SelectByValue(""))
        </td>
        <td>
            @Html.Input(m => m.Data.Entries[0].Time).Value("00:00")
        </td>
        <td>
            @Html.Input(m => m.Data.Entries[0].UserSlot).Value("")
        </td>
        <td>
            <button type="button" class="btn btn-danger entry-remove">Remove entry</button>
        </td>
    </tr>
    </tbody>
</table>

<script>

    function copyTemplate() {
        const source = document.getElementById('entry-template');
        const dest = document.getElementById('entries');

        const idx = dest.children.length;
        const copy = source.querySelector('tr').cloneNode(true);
        copy.querySelectorAll('input, select').forEach(el => {
            el.name = el.name.replace('[0]', `[${idx}]`);
            el.id = el.id.replace('_0_', `_${idx}_`);
        });

        dest.appendChild(copy);

        copy.querySelector('button').addEventListener('click', () => {
            const nodes = dest.childNodes;
            let match = false;
            nodes.forEach((node, idx) => {
                if (!match) {
                    match = node === copy;
                    return;
                }

                node.querySelectorAll('input, select').forEach(el => {
                    el.name = el.name.replace(`[${idx}]`, `[${idx - 1}]`);
                    el.id = el.id.replace(`_${idx}_`, `_${idx - 1}_`);
                });
            });

            dest.removeChild(copy);
        });
    }

    document.querySelector('button.entry-add').addEventListener('click', () => {
        copyTemplate();
    });

    copyTemplate();

</script>
